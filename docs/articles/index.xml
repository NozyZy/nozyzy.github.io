<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Articles -  - NozZy</title>
        <link>http://localhost:1313/articles/</link>
        <description>Articles -  - NozZy</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>nozzy@club-rezo.net (NozZy)</managingEditor>
            <webMaster>nozzy@club-rezo.net (NozZy)</webMaster><lastBuildDate>Sat, 21 Sep 2024 21:13:10 &#43;0200</lastBuildDate><atom:link href="http://localhost:1313/articles/" rel="self" type="application/rss+xml" /><item>
    <title>Wireshark/Tshark TCP illegal flags</title>
    <link>http://localhost:1313/articles/tcp_illegal_flags/</link>
    <pubDate>Sat, 21 Sep 2024 21:13:10 &#43;0200</pubDate><author>
        <name>NozZy</name>
    </author><guid>http://localhost:1313/articles/tcp_illegal_flags/</guid>
    <description><![CDATA[<p>During the <a href="https://pctf.competitivecyber.club/" target="_blank" rel="noopener noreferrer">patriotCTF</a>, I had to filter all the illegal TCP packets from a network packet capture, to find how the flag was exfiltrated.</p>
<p>For that purpose, I based my knowledge of &ldquo;illegal TCP packets&rdquo; only on wrong flags combinations, displayed as red in wireshark:</p>
<figure><a class="lightgallery" href="/illegal_tcp_flags/img.png" title="Wireshark red packets" data-thumbnail="/illegal_tcp_flags/img.png" data-sub-html="<h2>Wireshark red packets</h2><p>Wireshark red packets</p>"><img  loading="lazy" src='/illegal_tcp_flags/img.png'   alt="Wireshark red packets"  ></a><figcaption class="image-caption">Wireshark red packets</figcaption>
    </figure>
<p>Here, only the combination of <strong>FIN</strong>, <strong>SYN</strong>, <strong>RST</strong> appears, with the addition of PSH sometimes.</p>]]></description>
</item><item>
    <title>How to decrypt LUKS1 with key in memory</title>
    <link>http://localhost:1313/articles/decrypt-luks1-with-key-in-memory/</link>
    <pubDate>Mon, 10 Jul 2023 17:15:29 &#43;0200</pubDate><author>
        <name>NozZy</name>
    </author><guid>http://localhost:1313/articles/decrypt-luks1-with-key-in-memory/</guid>
    <description><![CDATA[<h1 id="how-to-decrypt-luks1-with-key-in-memory" class="headerLink">
    <a href="#how-to-decrypt-luks1-with-key-in-memory" class="header-mark"></a>How to decrypt LUKS1 with key in memory</h1><hr>
<p>LUKS is a standard for Linux disk encryption, and exists in two version. The latest version LUKS2 can be strong and a trusted solution when paired with strong password and algorithm, whereas LUKS1 suffers from a severe <strong>vulnerability</strong>. The master key, used to encrypt and decrypt the whole disk, <strong>can be retrieved in the memory</strong> of the running machine.
This article will show you how to <em><strong>recover that key</strong></em>, and then <em><strong>decrypt the disk</strong></em>.</p>]]></description>
</item></channel>
</rss>
